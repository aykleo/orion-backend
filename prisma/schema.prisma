generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MuscleGroupName {
  PECTORALIS_MAJOR
  LATISSIMUS_DORSI
  DELTOID
  BICEPS_BRACHII
  TRICEPS_BRACHII
  RECTUS_ABDOMINIS
  OBLIQUES
  TRAPEZIUS
  RHOMBOIDS
  ERECTOR_SPINAE
  GLUTEUS_MAXIMUS
  GLUTEUS_MEDIUS
  GLUTEUS_MINOR
  QUADRICEPS
  HAMSTRINGS
  GASTROCNEMIUS
  SOLEUS
  TERES_MAJOR
  INFRASPINATUS
  SUPRASPINATUS
  SERRATUS_ANTERIOR
  PECTORALIS_MINOR
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String     @id
  username  String     @unique @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  role    UserRole @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  workouts  Workout[]
  exercises Exercise[]

  @@index([username, email])
}

model Exercise {
  id                   String                @id
  name                 String
  description          String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  user                 User                  @relation(fields: [userId], references: [id])
  exerciseMuscleGroups ExerciseMuscleGroup[]
  workouts             WorkoutExercise[]

  @@index([userId, name])
}

model MuscleGroup {
  id        String                @id
  name      MuscleGroupName
  exercises ExerciseMuscleGroup[]
}

model Workout {
  id        String            @id
  name      String            @db.VarChar(255)
  date      DateTime
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  exercises WorkoutExercise[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([userId, date])
}

model WorkoutExercise {
  id         String   @id
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets       Set[]
  order      Int
  notes      String?  @db.Text

  @@unique([workoutId, exerciseId])
}

model Set {
  id                String          @id
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String
  weight            Float
  reps              Int
  rpe               Float?
  notes             String?         @db.Text
  createdAt         DateTime        @default(now())
}

model ExerciseMuscleGroup {
  exerciseId    String
  muscleGroupId String
  isPrimary     Boolean     @default(false)
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])

  @@id([exerciseId, muscleGroupId])
}
